


def format_time(data, precision=2):

    data = data.strip().split('\n')

    out = ''
    for v in data:
        v = v.split(':')[-1].split('-')
        v = [f"{float(v_):.{precision}f}" for v_ in v ]
        out += 'test_times:' + '-'.join(v) + '\n'

    print(out)
    return out


def main():

    # OCSVM
    data = """
    test_times:0.16105079650878906-0.1638779640197754-0.16368556022644043-0.16493439674377441-0.16545844078063965
    test_times:0.12923860549926758-0.13432073593139648-0.13196778297424316-0.12877440452575684-0.11003494262695312
    test_times:0.27820396423339844-0.28669023513793945-0.2692382335662842-0.2612450122833252-0.2917821407318115
    test_times:0.1373600959777832-0.132340669631958-0.13724493980407715-0.12536978721618652-0.14167308807373047
    test_times:0.11702752113342285-0.1133718490600586-0.13081860542297363-0.1528022289276123-0.11754918098449707
    test_times:0.12237811088562012-0.12243890762329102-0.12195229530334473-0.12244129180908203-0.1223764419555664
    test_times:0.07439017295837402-0.07271742820739746-0.0736689567565918-0.0733635425567627-0.07386541366577148
    """

    #OC-KJL+QS
    data="""
    test_times:0.019432544708251953-0.012350797653198242-0.014328479766845703-0.01929783821105957-0.030165672302246094	
    test_times:0.03972291946411133-0.024626970291137695-0.026088476181030273-0.023412227630615234-0.01460409164428711	
    test_times:0.013956308364868164-0.05882430076599121-0.009674072265625-0.01353597640991211-0.03301596641540527	
    test_times:0.040040016174316406-0.025690317153930664-0.030876636505126953-0.03691887855529785-0.018733501434326172	
    test_times:0.041875362396240234-0.04184556007385254-0.018008947372436523-0.041211605072021484-0.07673811912536621	
    test_times:0.03814125061035156-0.04142475128173828-0.11004114151000977-0.05822587013244629-0.01776123046875	
    test_times:0.06541252136230469-0.03452038764953613-0.0382993221282959-0.10252904891967773-0.04527759552001953	
    """

    # OC-Nystrom+QS
    data="""
    test_times:0.02825450897216797-0.015856504440307617-0.018163442611694336-0.013769865036010742-0.024312257766723633							
    test_times:0.01648092269897461-0.017180919647216797-0.029560327529907227-0.024437904357910156-0.02121591567993164							
    test_times:0.019244670867919922-0.017247438430786133-0.013597488403320312-0.013746976852416992-0.01367950439453125							
    test_times:0.017755985260009766-0.043112754821777344-0.020083904266357422-0.03188347816467285-0.01639866828918457							
    test_times:0.04229569435119629-0.020477294921875-0.043573617935180664-0.015773534774780273-0.04087090492248535							
    test_times:0.04597783088684082-0.06088876724243164-0.04759335517883301-0.04096364974975586-0.039963483810424805							
    test_times:0.06264829635620117-0.05117511749267578-0.0410466194152832-0.07195496559143066-0.11774420738220215							
    """
    format_time(data)




if __name__ == '__main__':
    # main()


    # CTU, n_Jobs=10
    data = """
      test_times:0.06574269771575927-0.06855694770812988-0.06862115859985352-0.06373528242111207-0.07013514757156372
    """
    format_time(data, precision=5)

    data = """
          test_times:0.0040662002563476565-0.0038327956199645996-0.0037461066246032714-0.0037293457984924317-0.0035744905471801758
       """
    format_time(data, precision=5)

    data = """
      test_times:0.0036340069770812986-0.0037480759620666503-0.0036394786834716797-0.0034969758987426756-0.00395895004272461
    """
    format_time(data, precision=5)